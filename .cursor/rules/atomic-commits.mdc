---
alwaysApply: true
description: Encourages minimal, focused commits that accomplish one specific goal with clear, testable changes.
---

# Atomic Commits

Encourages minimal, focused commits that accomplish one specific goal with clear, testable changes.

<rule>
name: atomic_commits
description: Promote single-purpose commits with minimal changes to accomplish specific targets
filters:
  - type: file_extension
    pattern: "\\.(js|jsx|ts|tsx|json|md|css)$"
  - type: event
    pattern: "file_save|file_create"

actions:
  - type: suggest
    message: |
      ## ‚öõÔ∏è Atomic Commit Guidelines

      ### Single Purpose Principle
      Each commit should accomplish **one specific goal** with the minimal changes necessary. If you can't describe your commit in a single, clear sentence, it's probably too large.

      ### Atomic Commit Checklist
      Before committing, ask yourself:
      - [ ] **Single Purpose**: Does this commit do exactly one thing?
      - [ ] **Minimal Changes**: Are these the smallest changes needed for this goal?
      - [ ] **Self-Contained**: Could this commit be safely reverted without breaking other features?
      - [ ] **Testable**: Can I test this specific change in isolation?
      - [ ] **Clear Message**: Can I describe this change in one clear sentence?

      ### What Makes a Good Atomic Commit
      
      **‚úÖ GOOD Examples:**
      ```
      feat: add route input validation
      fix: correct map marker positioning
      docs: update installation instructions
      test: add unit tests for scoring service
      refactor: extract map styling to separate CSS file
      style: fix ESLint warnings in Game component
      ```

      **‚ùå TOO LARGE Examples:**
      ```
      feat: implement complete Google Maps integration with scoring and UI
      fix: various bugs and add new features
      refactor: reorganize project structure and update documentation
      ```

      ### Atomic Commit Categories

      **üÜï feat**: New feature (single feature only)
      - Add one component
      - Add one service method
      - Add one utility function
      - Implement one user story

      **üêõ fix**: Bug fix (single bug only)
      - Fix one specific issue
      - Correct one error condition
      - Resolve one failing test

      **üìö docs**: Documentation change
      - Update one document
      - Add documentation for one feature
      - Fix one documentation error

      **üß™ test**: Test addition or modification
      - Add tests for one component/function
      - Fix one failing test
      - Add one test scenario

      **‚ôªÔ∏è refactor**: Code improvement without behavior change
      - Extract one function/component
      - Rename one set of related items
      - Reorganize one module

      **üíÑ style**: Code formatting/linting
      - Fix ESLint issues in one file
      - Format one component
      - Fix one style inconsistency

      **üîß chore**: Maintenance task
      - Update one dependency
      - Add one script
      - Configure one tool

      ### Change Size Guidelines

      **Ideal Atomic Commit:**
      - **Files**: 1-3 files maximum
      - **Lines**: < 50 lines of changes (excluding generated files)
      - **Scope**: Single component, function, or concern
      - **Time**: Should take < 30 minutes to review

      **Warning Signs (Too Large):**
      - **Files**: > 5 files changed
      - **Lines**: > 100 lines of changes
      - **Mixed Concerns**: Touches multiple unrelated areas
      - **Complex Message**: Commit message needs multiple sentences

      ### Breaking Down Large Changes

      **Instead of one large commit:**
      ```
      feat: implement complete game flow with maps, scoring, and UI
      ```

      **Break into atomic commits:**
      ```
      1. feat: add Google Maps API integration service
      2. feat: create Map display component
      3. feat: add route input component with validation
      4. feat: implement basic scoring algorithm
      5. feat: create Game orchestration component
      6. test: add unit tests for scoring service
      7. test: add E2E tests for complete game flow
      8. docs: update README with new features
      ```

      ### Testing Atomic Commits

      **Each commit should:**
      - Pass all existing tests
      - Include tests for new functionality
      - Be independently testable
      - Not break the build

      **Quick validation:**
      ```bash
      # Before committing each atomic change
      npm run test:all:dev    # Fast feedback
      npm run lint           # Code quality
      ```

      ### Atomic Commit Workflow

      **1. Plan Your Changes**
      - Identify the specific goal
      - List the minimal files/functions to change
      - Break down into 1-3 file changes max

      **2. Make Minimal Changes**
      - Change only what's necessary
      - Avoid "while I'm here" changes
      - Save related but separate improvements for another commit

      **3. Test Independently**
      - Verify this specific change works
      - Run tests to ensure no regressions
      - Test the change in isolation if possible

      **4. Commit with Clear Message**
      - Use conventional commit format
      - Describe exactly what changed
      - Keep message concise and specific

      **5. Move to Next Atomic Change**
      - Resist the urge to bundle changes
      - Each commit should stand alone
      - Build features incrementally

      ### Working with Our Codebase

      **Current Structure Supports Atomic Commits:**
      - **Components**: Each in separate files (`src/components/`)
      - **Services**: Isolated business logic (`src/services/`)
      - **Tests**: Co-located with source files
      - **Documentation**: Separate files for different concerns

      **Good Atomic Patterns for Our Project:**
      ```
      feat: add Map component with basic Google Maps display
      feat: add RouteInput component with text validation
      feat: implement route scoring algorithm in scoring service
      test: add unit tests for Map component
      test: add E2E tests for route input flow
      fix: correct map marker positioning bug
      docs: update QA.md with new testing patterns
      ```

      ### Benefits of Atomic Commits
      - **Easier Reviews**: Small, focused changes are easier to understand
      - **Safer Reverts**: Can revert specific features without affecting others
      - **Better Debugging**: Git bisect works better with atomic changes
      - **Cleaner History**: Clear progression of feature development
      - **Parallel Work**: Team members can work on different atomic changes
      - **Quality Gates**: Each commit can be independently validated

      ### Integration with Pre-commit Hooks
      Our README enforcer works perfectly with atomic commits:
      - Small code changes = small documentation updates
      - Clear commit purpose = clear documentation updates
      - Independent changes = independent documentation sections

examples:
  - input: "Adding complete Google Maps integration with UI and scoring"
    output: "Break into: 1) Add Maps API service, 2) Add Map component, 3) Add scoring logic, 4) Add tests"
  - input: "Fixing multiple bugs and adding new feature"
    output: "Separate into individual commits: one per bug fix, one for feature"

metadata:
  priority: high
  version: 1.0
  category: "development-workflow"
</rule>

